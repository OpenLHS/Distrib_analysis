# Initialise error messages
error_message <- NULL
# ------------------------- CODE STARTS HERE ------------------------
# Calculate number of data nodes from files fitting the pattern in the working directory
# This assumes unique event times outputs have a name like Times_[[:digit:]]+_output.csv
K=length(list.files(pattern="Times_[[:digit:]]+_output.csv"))
# First step: initialization of times and betas
if (!file.exists("Global_times_output.csv")) {
source("Coord_node_init_iter_cox-reg.R")
coord_init_iter_cox_reg(manualwd)
} else {
# Find current iteration number
files <- list.files(pattern = "Beta_\\d+_output.csv")
indext <- as.numeric(gsub("Beta_(\\d+)_output.csv", "\\1", files))
t <- max(indext, 0)
t <- t + 1
source("Coord_node_add_iter_cox-reg.R")
coord_call_add_iter_cox_reg(manualwd, t)
}
# Clear variables
rm(list = ls())
############### DISTRIBUTED COX MODEL ####################
############### Local site code ###########################
## License: https://creativecommons.org/licenses/by-nc-sa/4.0/
## Copyright: GRIIS / Université de Sherbrooke
# Loading packages and setting up core variables --------------------------
library("survival")          # Contains the core survival analysis routines
# If you want to skip the automated working directory setting, input 1 here.
# If you do so, make sure the working directory is set correctly manualy.
manualwd <- -1
# If you want to override the node numbering based on filename, input 0 or a positive integer here
manualk <- 1
manualt <- -1
# No modifications should be required below this point
######################################################
if (manualwd != 1) {
# Set working directory automatically
# this.path package is available
if (require(this.path)) {
setwd(this.dir())
# else if running in R studio and the rstudioapi is available, set the correct working directory
} else if ((Sys.getenv("RSTUDIO") == "1") & (require("rstudioapi"))) {
print("RSTUDIO")
path <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(path)
# no known means to automatically set working directory
} else {
stop("The required conditions to automatically set the working directory are not met. See R file")
}
} else {
print("The automated working directory setup has been bypassed. If there is an error, this might be the cause.")
}
# Verifying if there is a coordination node output file present -- Otherwise initialize files
if (!file.exists(paste0("Times_", manualk ,"_output.csv"))) {
source("Data_node_call_init_cox-reg.R")
data_call_init_cox_reg(manualwd, manualk)
# If a coordination node output file exists -- Start a new iteration
} else {
source("Data_node_call_iter_cox-reg.R")
data_call_iter_cox_reg(manualwd, manualk, manualt)
}
## Remove all environment variables.
## If you want to see the variable that were created, simply don't execute that line (and clear them manually after)
rm(list = ls())
############### DISTRIBUTED COX MODEL ####################
############### Local site code ###########################
## License: https://creativecommons.org/licenses/by-nc-sa/4.0/
## Copyright: GRIIS / Université de Sherbrooke
# Loading packages and setting up core variables --------------------------
library("survival")          # Contains the core survival analysis routines
# If you want to skip the automated working directory setting, input 1 here.
# If you do so, make sure the working directory is set correctly manualy.
manualwd <- -1
# If you want to override the node numbering based on filename, input 0 or a positive integer here
manualk <- 2
manualt <- -1
# No modifications should be required below this point
######################################################
if (manualwd != 1) {
# Set working directory automatically
# this.path package is available
if (require(this.path)) {
setwd(this.dir())
# else if running in R studio and the rstudioapi is available, set the correct working directory
} else if ((Sys.getenv("RSTUDIO") == "1") & (require("rstudioapi"))) {
print("RSTUDIO")
path <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(path)
# no known means to automatically set working directory
} else {
stop("The required conditions to automatically set the working directory are not met. See R file")
}
} else {
print("The automated working directory setup has been bypassed. If there is an error, this might be the cause.")
}
# Verifying if there is a coordination node output file present -- Otherwise initialize files
if (!file.exists(paste0("Times_", manualk ,"_output.csv"))) {
source("Data_node_call_init_cox-reg.R")
data_call_init_cox_reg(manualwd, manualk)
# If a coordination node output file exists -- Start a new iteration
} else {
source("Data_node_call_iter_cox-reg.R")
data_call_iter_cox_reg(manualwd, manualk, manualt)
}
## Remove all environment variables.
## If you want to see the variable that were created, simply don't execute that line (and clear them manually after)
rm(list = ls())
############### DISTRIBUTED COX MODEL ####################
############### Local site code ###########################
## License: https://creativecommons.org/licenses/by-nc-sa/4.0/
## Copyright: GRIIS / Université de Sherbrooke
# Loading packages and setting up core variables --------------------------
library("survival")          # Contains the core survival analysis routines
# If you want to skip the automated working directory setting, input 1 here.
# If you do so, make sure the working directory is set correctly manualy.
manualwd <- -1
# If you want to override the node numbering based on filename, input 0 or a positive integer here
manualk <- 3
manualt <- -1
# No modifications should be required below this point
######################################################
if (manualwd != 1) {
# Set working directory automatically
# this.path package is available
if (require(this.path)) {
setwd(this.dir())
# else if running in R studio and the rstudioapi is available, set the correct working directory
} else if ((Sys.getenv("RSTUDIO") == "1") & (require("rstudioapi"))) {
print("RSTUDIO")
path <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(path)
# no known means to automatically set working directory
} else {
stop("The required conditions to automatically set the working directory are not met. See R file")
}
} else {
print("The automated working directory setup has been bypassed. If there is an error, this might be the cause.")
}
# Verifying if there is a coordination node output file present -- Otherwise initialize files
if (!file.exists(paste0("Times_", manualk ,"_output.csv"))) {
source("Data_node_call_init_cox-reg.R")
data_call_init_cox_reg(manualwd, manualk)
# If a coordination node output file exists -- Start a new iteration
} else {
source("Data_node_call_iter_cox-reg.R")
data_call_iter_cox_reg(manualwd, manualk, manualt)
}
## Remove all environment variables.
## If you want to see the variable that were created, simply don't execute that line (and clear them manually after)
rm(list = ls())
############### DISTRIBUTED COX MODEL ####################
############### Coordinating node code ###################
## License: https://creativecommons.org/licenses/by-nc-sa/4.0/
## Copyright: GRIIS / Université de Sherbrooke
# Loading packages and setting up core variables --------------------------
library("survival")          # Contains the core survival analysis routines
library(MASS)                # Functions for matrix manipulation (ginv)
# If you want to skip the automated working directory setting, input 1 here.
# If you do so, make sure the working directory is set correctly manualy.
manualwd <- -1
if (manualwd != 1) {
# Set working directory automatically
# this.path package is available
if (require(this.path)) {
setwd(this.dir())
# else if running in R studio and the rstudioapi is available, set the correct working directory
} else if ((Sys.getenv("RSTUDIO") == "1") & (require("rstudioapi"))) {
print("RSTUDIO")
path <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(path)
# no known means to automatically set working directory
} else {
stop("The required conditions to automatically set the working directory are not met. See R file")
}
} else {
print("The automated working directory setup has been bypassed. If there is an error, this might be the cause.")
}
# Initialise error messages
error_message <- NULL
# ------------------------- CODE STARTS HERE ------------------------
# Calculate number of data nodes from files fitting the pattern in the working directory
# This assumes unique event times outputs have a name like Times_[[:digit:]]+_output.csv
K=length(list.files(pattern="Times_[[:digit:]]+_output.csv"))
# First step: initialization of times and betas
if (!file.exists("Global_times_output.csv")) {
source("Coord_node_init_iter_cox-reg.R")
coord_init_iter_cox_reg(manualwd)
} else {
# Find current iteration number
files <- list.files(pattern = "Beta_\\d+_output.csv")
indext <- as.numeric(gsub("Beta_(\\d+)_output.csv", "\\1", files))
t <- max(indext, 0)
t <- t + 1
source("Coord_node_add_iter_cox-reg.R")
coord_call_add_iter_cox_reg(manualwd, t)
}
# Clear variables
rm(list = ls())
############### DISTRIBUTED COX MODEL ####################
############### Local site code ###########################
## License: https://creativecommons.org/licenses/by-nc-sa/4.0/
## Copyright: GRIIS / Université de Sherbrooke
# Loading packages and setting up core variables --------------------------
library("survival")          # Contains the core survival analysis routines
# If you want to skip the automated working directory setting, input 1 here.
# If you do so, make sure the working directory is set correctly manualy.
manualwd <- -1
# If you want to override the node numbering based on filename, input 0 or a positive integer here
manualk <- 1
manualt <- -1
# No modifications should be required below this point
######################################################
if (manualwd != 1) {
# Set working directory automatically
# this.path package is available
if (require(this.path)) {
setwd(this.dir())
# else if running in R studio and the rstudioapi is available, set the correct working directory
} else if ((Sys.getenv("RSTUDIO") == "1") & (require("rstudioapi"))) {
print("RSTUDIO")
path <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(path)
# no known means to automatically set working directory
} else {
stop("The required conditions to automatically set the working directory are not met. See R file")
}
} else {
print("The automated working directory setup has been bypassed. If there is an error, this might be the cause.")
}
# Verifying if there is a coordination node output file present -- Otherwise initialize files
if (!file.exists(paste0("Times_", manualk ,"_output.csv"))) {
source("Data_node_call_init_cox-reg.R")
data_call_init_cox_reg(manualwd, manualk)
# If a coordination node output file exists -- Start a new iteration
} else {
source("Data_node_call_iter_cox-reg.R")
data_call_iter_cox_reg(manualwd, manualk, manualt)
}
## Remove all environment variables.
## If you want to see the variable that were created, simply don't execute that line (and clear them manually after)
rm(list = ls())
############### DISTRIBUTED COX MODEL ####################
############### Local site code ###########################
## License: https://creativecommons.org/licenses/by-nc-sa/4.0/
## Copyright: GRIIS / Université de Sherbrooke
# Loading packages and setting up core variables --------------------------
library("survival")          # Contains the core survival analysis routines
# If you want to skip the automated working directory setting, input 1 here.
# If you do so, make sure the working directory is set correctly manualy.
manualwd <- -1
# If you want to override the node numbering based on filename, input 0 or a positive integer here
manualk <- 2
manualt <- -1
# No modifications should be required below this point
######################################################
if (manualwd != 1) {
# Set working directory automatically
# this.path package is available
if (require(this.path)) {
setwd(this.dir())
# else if running in R studio and the rstudioapi is available, set the correct working directory
} else if ((Sys.getenv("RSTUDIO") == "1") & (require("rstudioapi"))) {
print("RSTUDIO")
path <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(path)
# no known means to automatically set working directory
} else {
stop("The required conditions to automatically set the working directory are not met. See R file")
}
} else {
print("The automated working directory setup has been bypassed. If there is an error, this might be the cause.")
}
# Verifying if there is a coordination node output file present -- Otherwise initialize files
if (!file.exists(paste0("Times_", manualk ,"_output.csv"))) {
source("Data_node_call_init_cox-reg.R")
data_call_init_cox_reg(manualwd, manualk)
# If a coordination node output file exists -- Start a new iteration
} else {
source("Data_node_call_iter_cox-reg.R")
data_call_iter_cox_reg(manualwd, manualk, manualt)
}
## Remove all environment variables.
## If you want to see the variable that were created, simply don't execute that line (and clear them manually after)
rm(list = ls())
############### DISTRIBUTED COX MODEL ####################
############### Local site code ###########################
## License: https://creativecommons.org/licenses/by-nc-sa/4.0/
## Copyright: GRIIS / Université de Sherbrooke
# Loading packages and setting up core variables --------------------------
library("survival")          # Contains the core survival analysis routines
# If you want to skip the automated working directory setting, input 1 here.
# If you do so, make sure the working directory is set correctly manualy.
manualwd <- -1
# If you want to override the node numbering based on filename, input 0 or a positive integer here
manualk <- 3
manualt <- -1
# No modifications should be required below this point
######################################################
if (manualwd != 1) {
# Set working directory automatically
# this.path package is available
if (require(this.path)) {
setwd(this.dir())
# else if running in R studio and the rstudioapi is available, set the correct working directory
} else if ((Sys.getenv("RSTUDIO") == "1") & (require("rstudioapi"))) {
print("RSTUDIO")
path <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(path)
# no known means to automatically set working directory
} else {
stop("The required conditions to automatically set the working directory are not met. See R file")
}
} else {
print("The automated working directory setup has been bypassed. If there is an error, this might be the cause.")
}
# Verifying if there is a coordination node output file present -- Otherwise initialize files
if (!file.exists(paste0("Times_", manualk ,"_output.csv"))) {
source("Data_node_call_init_cox-reg.R")
data_call_init_cox_reg(manualwd, manualk)
# If a coordination node output file exists -- Start a new iteration
} else {
source("Data_node_call_iter_cox-reg.R")
data_call_iter_cox_reg(manualwd, manualk, manualt)
}
## Remove all environment variables.
## If you want to see the variable that were created, simply don't execute that line (and clear them manually after)
rm(list = ls())
############### DISTRIBUTED COX MODEL ####################
############### Coordinating node code ###################
## License: https://creativecommons.org/licenses/by-nc-sa/4.0/
## Copyright: GRIIS / Université de Sherbrooke
# Loading packages and setting up core variables --------------------------
library("survival")          # Contains the core survival analysis routines
library(MASS)                # Functions for matrix manipulation (ginv)
# If you want to skip the automated working directory setting, input 1 here.
# If you do so, make sure the working directory is set correctly manualy.
manualwd <- -1
if (manualwd != 1) {
# Set working directory automatically
# this.path package is available
if (require(this.path)) {
setwd(this.dir())
# else if running in R studio and the rstudioapi is available, set the correct working directory
} else if ((Sys.getenv("RSTUDIO") == "1") & (require("rstudioapi"))) {
print("RSTUDIO")
path <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(path)
# no known means to automatically set working directory
} else {
stop("The required conditions to automatically set the working directory are not met. See R file")
}
} else {
print("The automated working directory setup has been bypassed. If there is an error, this might be the cause.")
}
# Initialise error messages
error_message <- NULL
# ------------------------- CODE STARTS HERE ------------------------
# Calculate number of data nodes from files fitting the pattern in the working directory
# This assumes unique event times outputs have a name like Times_[[:digit:]]+_output.csv
K=length(list.files(pattern="Times_[[:digit:]]+_output.csv"))
# First step: initialization of times and betas
if (!file.exists("Global_times_output.csv")) {
source("Coord_node_init_iter_cox-reg.R")
coord_init_iter_cox_reg(manualwd)
} else {
# Find current iteration number
files <- list.files(pattern = "Beta_\\d+_output.csv")
indext <- as.numeric(gsub("Beta_(\\d+)_output.csv", "\\1", files))
t <- max(indext, 0)
t <- t + 1
source("Coord_node_add_iter_cox-reg.R")
coord_call_add_iter_cox_reg(manualwd, t)
}
# Clear variables
rm(list = ls())
# Includes
library("survival")
library("survminer")
nbBetas <- 7 # Input the number of betas
k <- 3 # Imput the number of nodes
# Read data
data = data.frame()
for(i in 1:k){
if(!file.exists(paste0("../distributed/Data_node_grouped_", k ,".csv"))){
warning("Attempt to find a file with grouped data failed and thus this will use ungrouped data. Be aware that this algorithm is based on WebDisco which is deemed non-confidential for ungrouped data.")
node_data <- read.csv(paste0("../distributed/Data_node_", k, ".csv"))
} else {
node_data <- read.csv(paste0("../distributed/Data_node_grouped_", k, ".csv"))
}
data <- rbind(data, node_data)
}
column_indices <- (3:(nbBetas + 2))
formula <- as.formula(paste("Surv(time, status) ~", paste(paste0("data[,", column_indices, "]"), collapse = " + ")))
res.cox <- coxph(formula, data, ties = "breslow")
summary(res.cox)
data1 = read.csv("../distributed/Data_node_grouped_1.csv")
data2 = read.csv("../distributed/Data_node_grouped_2.csv")
data3 = read.csv("../distributed/Data_node_grouped_3.csv")
data = rbind(data1, data2, data3)
## Remove all environment variables.
## If you want to see the variable that were created, simply don't execute that line (and clear them manually after)
rm(list = ls())
# Includes
library("survival")
library("survminer")
nbBetas <- 7 # Input the number of betas
k <- 3 # Imput the number of nodes
# If you want to skip the automated working directory setting, input 1 here.
# If you do so, make sure the working directory is set correctly manualy.
manualwd <- -1
if (manualwd != 1) {
# Set working directory automatically
# this.path package is available
if (require(this.path)) {
setwd(this.dir())
# else if running in R studio and the rstudioapi is available, set the correct working directory
} else if ((Sys.getenv("RSTUDIO") == "1") & (require("rstudioapi"))) {
print("RSTUDIO")
path <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(path)
# no known means to automatically set working directory
} else {
stop("The required conditions to automatically set the working directory are not met. See R file")
}
} else {
print("The automated working directory setup has been bypassed. If there is an error, this might be the cause.")
}
# Read data
data = data.frame()
for(i in 1:k){
if(!file.exists(paste0("../distributed/Data_node_grouped_", k ,".csv"))){
warning("Attempt to find a file with grouped data failed and thus this will use ungrouped data. Be aware that this algorithm is based on WebDisco which is deemed non-confidential for ungrouped data.")
node_data <- read.csv(paste0("../distributed/Data_node_", k, ".csv"))
} else {
node_data <- read.csv(paste0("../distributed/Data_node_grouped_", k, ".csv"))
}
data <- rbind(data, node_data)
}
column_indices <- (3:(nbBetas + 2))
formula <- as.formula(paste("Surv(time, status) ~", paste(paste0("data[,", column_indices, "]"), collapse = " + ")))
res.cox <- coxph(formula, data, ties = "breslow")
summary(res.cox)
data1 = read.csv("../distributed/Data_node_grouped_1.csv")
data2 = read.csv("../distributed/Data_node_grouped_2.csv")
data3 = read.csv("../distributed/Data_node_grouped_3.csv")
data = rbind(data1, data2, data3)
column_indices <- (3:(nbBetas + 2))
formula <- as.formula(paste("Surv(time, status) ~", paste(paste0("data[,", column_indices, "]"), collapse = " + ")))
res.cox <- coxph(formula, data, ties = "breslow")
summary(res.cox)
# Read data
data = data.frame()
for(i in 1:k){
if(!file.exists(paste0("../distributed/Data_node_grouped_", i ,".csv"))){
warning("Attempt to find a file with grouped data failed and thus this will use ungrouped data. Be aware that this algorithm is based on WebDisco which is deemed non-confidential for ungrouped data.")
node_data <- read.csv(paste0("../distributed/Data_node_", i, ".csv"))
} else {
node_data <- read.csv(paste0("../distributed/Data_node_grouped_", i, ".csv"))
}
data <- rbind(data, node_data)
}
column_indices <- (3:(nbBetas + 2))
formula <- as.formula(paste("Surv(time, status) ~", paste(paste0("data[,", column_indices, "]"), collapse = " + ")))
res.cox <- coxph(formula, data, ties = "breslow")
summary(res.cox)
############### POOLED COX MODEL ####################
## License: https://creativecommons.org/licenses/by-nc-sa/4.0/
## Copyright: GRIIS / Université de Sherbrooke
# Includes
library("survival")
library("survminer")
nbBetas <- 7 # Input the number of betas
K <- 3 # Imput the number of nodes
# If you want to skip the automated working directory setting, input 1 here.
# If you do so, make sure the working directory is set correctly manualy.
manualwd <- -1
if (manualwd != 1) {
# Set working directory automatically
# this.path package is available
if (require(this.path)) {
setwd(this.dir())
# else if running in R studio and the rstudioapi is available, set the correct working directory
} else if ((Sys.getenv("RSTUDIO") == "1") & (require("rstudioapi"))) {
print("RSTUDIO")
path <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(path)
# no known means to automatically set working directory
} else {
stop("The required conditions to automatically set the working directory are not met. See R file")
}
} else {
print("The automated working directory setup has been bypassed. If there is an error, this might be the cause.")
}
### Code starts here
# Read data
data = data.frame()
for(k in 1:K){
if(!file.exists(paste0("../distributed/Data_node_grouped_", k ,".csv"))){
warning("Attempt to find a file with grouped data failed and thus this will use ungrouped data. Be aware that this algorithm is based on WebDisco which is deemed non-confidential for ungrouped data.")
node_data <- read.csv(paste0("../distributed/Data_node_", k, ".csv"))
} else {
node_data <- read.csv(paste0("../distributed/Data_node_grouped_", k, ".csv"))
}
data <- rbind(data, node_data)
}
column_indices <- (3:(nbBetas + 2))
formula <- as.formula(paste("Surv(time, status) ~", paste(paste0("data[,", column_indices, "]"), collapse = " + ")))
res.cox <- coxph(formula, data, ties = "breslow")
summary(res.cox)
## Remove all environment variables.
## If you want to see the variable that were created, simply don't execute that line (and clear them manually after)
rm(list = ls())
