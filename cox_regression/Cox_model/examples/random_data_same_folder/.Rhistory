nbBetas <- 3
# No modifications should be required below this point
######################################################
k <- -1
if (manualwd != 1) {
# Set working directory automatically
# this.path package is available
if (require(this.path)) {
setwd(this.dir())
# else if running in R studio and the rstudioapi is available, set the correct working directory
} else if ((Sys.getenv("RSTUDIO") == "1") & (require("rstudioapi"))) {
print("RSTUDIO")
path <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(path)
# no known means to automatically set working directory
} else {
stop("The required conditions to automatically set the working directory are not met. See R file")
}
} else {
print("The automated working directory setup has been bypassed. If there is an error, this might be the cause.")
}
# If there is a manual override, the node number (k) is set to the manual value --------------------------
if (manualk >= 0) {
k <- manualk
# If there is no valid override number, there will be an attempt to extract the node number from the data file name
} else {
# List all the data files conforming the the pattern below. There should be only 1
datafileslist <- list.files(pattern="Data_node_[[:digit:]]+.csv")
test = list.files(pattern="Data_node_grouped_[[:digit:]]+.csv")
# Assuming there is only one data file found
if (length(datafileslist) == 1) {
filename <- datafileslist[[1]]
lastunders <- max(unlist(gregexpr("_",filename)))
lenmainfilename <- nchar(filename)-4
autok <- strtoi(substring(filename,lastunders+1,lenmainfilename))
k <- autok
# If there is more than one data file in the folder, the script will halt.
} else {
stop("There is more than one data file in this folder, the node number cannot be automatically identified")
}
}
# Verifying that a valid node number could be allocated manually or automatically
if (k >= 0) {
# If no files found --- Initialize time and local betas
if (!file.exists(paste0("Times_", manualk ,"_output.csv"))) {
source("Data_node_call_init_cox-reg.R")
data_call_init_cox_reg(manualwd, k)
# If global times file exists -- Start a new iteration   (call second function to calculate params)
} else {
# Find current iteration number
files <- list.files(pattern = "Beta_\\d+_output.csv")
indext <- as.numeric(gsub("Beta_(\\d+)_output.csv", "\\1", files))
t <- max(indext, 0)
source("Data_node_call_iter_cox-reg.R")
data_call_iter_cox_reg(manualwd, k, t)
}
} else {
stop("Node numbering was not set properly")
}
## Remove all environment variables.
## If you want to see the variable that were created, simply don't execute that line (and clear them manually after)
rm(list = ls())
############### DISTRIBUTED COX MODEL ####################
############### Local site code ###########################
## License: https://creativecommons.org/licenses/by-nc-sa/4.0/
## Copyright: GRIIS / Université de Sherbrooke
# Loading packages and setting up core variables --------------------------
library("survival")          # Contains the core survival analysis routines
# If you want to skip the automated working directory setting, input 1 here.
# If you do so, make sure the working directory is set correctly manualy.
manualwd <- -1
# If you want to override the node numbering based on filename, input 0 or a positive integer here
manualk <- 2
# Number of parameters (covariates)
nbBetas <- 3
# No modifications should be required below this point
######################################################
k <- -1
if (manualwd != 1) {
# Set working directory automatically
# this.path package is available
if (require(this.path)) {
setwd(this.dir())
# else if running in R studio and the rstudioapi is available, set the correct working directory
} else if ((Sys.getenv("RSTUDIO") == "1") & (require("rstudioapi"))) {
print("RSTUDIO")
path <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(path)
# no known means to automatically set working directory
} else {
stop("The required conditions to automatically set the working directory are not met. See R file")
}
} else {
print("The automated working directory setup has been bypassed. If there is an error, this might be the cause.")
}
# If there is a manual override, the node number (k) is set to the manual value --------------------------
if (manualk >= 0) {
k <- manualk
# If there is no valid override number, there will be an attempt to extract the node number from the data file name
} else {
# List all the data files conforming the the pattern below. There should be only 1
datafileslist <- list.files(pattern="Data_node_[[:digit:]]+.csv")
test = list.files(pattern="Data_node_grouped_[[:digit:]]+.csv")
# Assuming there is only one data file found
if (length(datafileslist) == 1) {
filename <- datafileslist[[1]]
lastunders <- max(unlist(gregexpr("_",filename)))
lenmainfilename <- nchar(filename)-4
autok <- strtoi(substring(filename,lastunders+1,lenmainfilename))
k <- autok
# If there is more than one data file in the folder, the script will halt.
} else {
stop("There is more than one data file in this folder, the node number cannot be automatically identified")
}
}
# Verifying that a valid node number could be allocated manually or automatically
if (k >= 0) {
# If no files found --- Initialize time and local betas
if (!file.exists(paste0("Times_", manualk ,"_output.csv"))) {
source("Data_node_call_init_cox-reg.R")
data_call_init_cox_reg(manualwd, k)
# If global times file exists -- Start a new iteration   (call second function to calculate params)
} else {
# Find current iteration number
files <- list.files(pattern = "Beta_\\d+_output.csv")
indext <- as.numeric(gsub("Beta_(\\d+)_output.csv", "\\1", files))
t <- max(indext, 0)
source("Data_node_call_iter_cox-reg.R")
data_call_iter_cox_reg(manualwd, k, t)
}
} else {
stop("Node numbering was not set properly")
}
## Remove all environment variables.
## If you want to see the variable that were created, simply don't execute that line (and clear them manually after)
rm(list = ls())
############### DISTRIBUTED COX MODEL ####################
############### Local site code ###########################
## License: https://creativecommons.org/licenses/by-nc-sa/4.0/
## Copyright: GRIIS / Université de Sherbrooke
# Loading packages and setting up core variables --------------------------
library("survival")          # Contains the core survival analysis routines
# If you want to skip the automated working directory setting, input 1 here.
# If you do so, make sure the working directory is set correctly manualy.
manualwd <- -1
# If you want to override the node numbering based on filename, input 0 or a positive integer here
manualk <- 3
# Number of parameters (covariates)
nbBetas <- 3
# No modifications should be required below this point
######################################################
k <- -1
if (manualwd != 1) {
# Set working directory automatically
# this.path package is available
if (require(this.path)) {
setwd(this.dir())
# else if running in R studio and the rstudioapi is available, set the correct working directory
} else if ((Sys.getenv("RSTUDIO") == "1") & (require("rstudioapi"))) {
print("RSTUDIO")
path <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(path)
# no known means to automatically set working directory
} else {
stop("The required conditions to automatically set the working directory are not met. See R file")
}
} else {
print("The automated working directory setup has been bypassed. If there is an error, this might be the cause.")
}
# If there is a manual override, the node number (k) is set to the manual value --------------------------
if (manualk >= 0) {
k <- manualk
# If there is no valid override number, there will be an attempt to extract the node number from the data file name
} else {
# List all the data files conforming the the pattern below. There should be only 1
datafileslist <- list.files(pattern="Data_node_[[:digit:]]+.csv")
test = list.files(pattern="Data_node_grouped_[[:digit:]]+.csv")
# Assuming there is only one data file found
if (length(datafileslist) == 1) {
filename <- datafileslist[[1]]
lastunders <- max(unlist(gregexpr("_",filename)))
lenmainfilename <- nchar(filename)-4
autok <- strtoi(substring(filename,lastunders+1,lenmainfilename))
k <- autok
# If there is more than one data file in the folder, the script will halt.
} else {
stop("There is more than one data file in this folder, the node number cannot be automatically identified")
}
}
# Verifying that a valid node number could be allocated manually or automatically
if (k >= 0) {
# If no files found --- Initialize time and local betas
if (!file.exists(paste0("Times_", manualk ,"_output.csv"))) {
source("Data_node_call_init_cox-reg.R")
data_call_init_cox_reg(manualwd, k)
# If global times file exists -- Start a new iteration   (call second function to calculate params)
} else {
# Find current iteration number
files <- list.files(pattern = "Beta_\\d+_output.csv")
indext <- as.numeric(gsub("Beta_(\\d+)_output.csv", "\\1", files))
t <- max(indext, 0)
source("Data_node_call_iter_cox-reg.R")
data_call_iter_cox_reg(manualwd, k, t)
}
} else {
stop("Node numbering was not set properly")
}
## Remove all environment variables.
## If you want to see the variable that were created, simply don't execute that line (and clear them manually after)
rm(list = ls())
############### DISTRIBUTED COX MODEL ####################
############### Coordinating node code ###################
## License: https://creativecommons.org/licenses/by-nc-sa/4.0/
## Copyright: GRIIS / Université de Sherbrooke
# Loading packages and setting up core variables --------------------------
library("survival")          # Contains the core survival analysis routines
library(MASS)                # Functions for matrix manipulation (ginv)
# General parameters
nbBetas <- 3    # Input the number of covariates (betas) here
# If you want to skip the automated working directory setting, input 1 here.
# If you do so, make sure the working directory is set correctly manualy.
manualwd <- -1
if (manualwd != 1) {
# Set working directory automatically
# this.path package is available
if (require(this.path)) {
setwd(this.dir())
# else if running in R studio and the rstudioapi is available, set the correct working directory
} else if ((Sys.getenv("RSTUDIO") == "1") & (require("rstudioapi"))) {
print("RSTUDIO")
path <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(path)
# no known means to automatically set working directory
} else {
stop("The required conditions to automatically set the working directory are not met. See R file")
}
} else {
print("The automated working directory setup has been bypassed. If there is an error, this might be the cause.")
}
# Initialise error messages
error_message <- NULL
# ------------------------- CODE STARTS HERE ------------------------
# Calculate number of data nodes from files fitting the pattern in the working directory
# This assumes unique event times outputs have a name like Times_[[:digit:]]+_output.csv
K=length(list.files(pattern="Times_[[:digit:]]+_output.csv"))
# First step: initialization of times and betas
if (!file.exists("Global_times_output.csv")) {
source("Coord_node_init_iter_cox-reg.R")
coord_init_iter_cox_reg(manualwd)
} else {
# Find current iteration number
files <- list.files(pattern = "Beta_\\d+_output.csv")
indext <- as.numeric(gsub("Beta_(\\d+)_output.csv", "\\1", files))
t <- max(indext, 0)
t <- t + 1
source("Coord_node_add_iter_cox-reg.R")
coord_call_add_iter_cox_reg(manualwd, t)
} # (!) On avait un else if ici avant qui permettait d'avoir un warning sur des données locales manquantes. A voir
# Clear variables
rm(list = ls())
############### POOLED COX MODEL ####################
## License: https://creativecommons.org/licenses/by-nc-sa/4.0/
## Copyright: GRIIS / Université de Sherbrooke
# Includes
library("survival")
library("survminer")
nbBetas <- 3 # Input the number of betas
# If you want to skip the automated working directory setting, input 1 here.
# If you do so, make sure the working directory is set correctly manualy.
manualwd <- -1
if (manualwd != 1) {
# Set working directory automatically
# this.path package is available
if (require(this.path)) {
setwd(this.dir())
# else if running in R studio and the rstudioapi is available, set the correct working directory
} else if ((Sys.getenv("RSTUDIO") == "1") & (require("rstudioapi"))) {
print("RSTUDIO")
path <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(path)
# no known means to automatically set working directory
} else {
stop("The required conditions to automatically set the working directory are not met. See R file")
}
} else {
print("The automated working directory setup has been bypassed. If there is an error, this might be the cause.")
}
### Code starts here
data1 <- read.csv("../Data_site_1.csv")
data2 <- read.csv("../Data_site_2.csv")
data3 <- read.csv("../Data_site_3.csv")
data <- rbind(data1, data2, data3)
column_indices <- (3:(nbBetas + 2))
formula <- as.formula(paste("Surv(time, status) ~", paste(paste0("data[,", column_indices, "]"), collapse = " + ")))
res.cox <- coxph(formula, data, ties = "breslow")
summary(res.cox)
## Remove all environment variables.
## If you want to see the variable that were created, simply don't execute that line (and clear them manually after)
rm(list = ls())
nbBetas <- 3 # Input the number of betas
# If you want to skip the automated working directory setting, input 1 here.
# If you do so, make sure the working directory is set correctly manualy.
manualwd <- -1
if (manualwd != 1) {
# Set working directory automatically
# this.path package is available
if (require(this.path)) {
setwd(this.dir())
# else if running in R studio and the rstudioapi is available, set the correct working directory
} else if ((Sys.getenv("RSTUDIO") == "1") & (require("rstudioapi"))) {
print("RSTUDIO")
path <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(path)
# no known means to automatically set working directory
} else {
stop("The required conditions to automatically set the working directory are not met. See R file")
}
} else {
print("The automated working directory setup has been bypassed. If there is an error, this might be the cause.")
}
data1 <- read.csv("../Data_site_1.csv")
data1 <- read.csv("../Data_node_1.csv")
data1 <- read.csv("Data_node_1.csv")
data2 <- read.csv("Data_node_2.csv")
data3 <- read.csv("Data_node_3.csv")
data <- rbind(data1, data2, data3)
column_indices <- (3:(nbBetas + 2))
formula <- as.formula(paste("Surv(time, status) ~", paste(paste0("data[,", column_indices, "]"), collapse = " + ")))
res.cox <- coxph(formula, data, ties = "breslow")
summary(res.cox)
read.csv(paste0("Beta_local_", k, ".csv"))
k=1
read.csv(paste0("Beta_local_", k, ".csv"))
length(read.csv(paste0("Beta_local_", k, ".csv")))
dim(read.csv(paste0("Beta_local_", k, ".csv")))[2]
dim(read.csv(paste0("Beta_local_", k, ".csv")))[1]
t=1
read.csv(paste0("Beta_", t-1, "_output.csv"))
# Get old beta
beta <-  read.csv(paste0("Beta_", t-1, "_output.csv"))
nbBetas <- dim(beta)[1]
for(i in 1:3){
source("Data_node_call_cox-reg_1.R")
source("Data_node_call_cox-reg_2.R")
source("Data_node_call_cox-reg_3.R")
source("Coord_node_call_inter_cox-reg.R")
}
source("Data_node_call_cox-reg_1.R")
source("Data_node_call_cox-reg_2.R")
source("Data_node_call_cox-reg_3.R")
source("Coord_node_call_inter_cox-reg.R")
source("Coord_node_call_iter_cox-reg.R")
for(i in 1:3){
source("Data_node_call_cox-reg_1.R")
source("Data_node_call_cox-reg_2.R")
source("Data_node_call_cox-reg_3.R")
source("Coord_node_call_iter_cox-reg.R")
}
############### POOLED COX MODEL ####################
## License: https://creativecommons.org/licenses/by-nc-sa/4.0/
## Copyright: GRIIS / Université de Sherbrooke
# Includes
library("survival")
library("survminer")
nbBetas <- 3 # Input the number of betas
# If you want to skip the automated working directory setting, input 1 here.
# If you do so, make sure the working directory is set correctly manualy.
manualwd <- -1
if (manualwd != 1) {
# Set working directory automatically
# this.path package is available
if (require(this.path)) {
setwd(this.dir())
# else if running in R studio and the rstudioapi is available, set the correct working directory
} else if ((Sys.getenv("RSTUDIO") == "1") & (require("rstudioapi"))) {
print("RSTUDIO")
path <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(path)
# no known means to automatically set working directory
} else {
stop("The required conditions to automatically set the working directory are not met. See R file")
}
} else {
print("The automated working directory setup has been bypassed. If there is an error, this might be the cause.")
}
### Code starts here
data1 <- read.csv("Data_node_1.csv")
data2 <- read.csv("Data_node_2.csv")
data3 <- read.csv("Data_node_3.csv")
data <- rbind(data1, data2, data3)
column_indices <- (3:(nbBetas + 2))
formula <- as.formula(paste("Surv(time, status) ~", paste(paste0("data[,", column_indices, "]"), collapse = " + ")))
res.cox <- coxph(formula, data, ties = "breslow")
summary(res.cox)
## Remove all environment variables.
## If you want to see the variable that were created, simply don't execute that line (and clear them manually after)
rm(list = ls())
datafileslist <- list.files(pattern="Data_node_[[:digit:]]+.csv")
test = list.files(pattern="Data_node_grouped_[[:digit:]]+.csv")
test = append(test, 1)
test = append(test, 1)
for(i in 1:3){
source("Data_node_call_cox-reg_1.R")
source("Data_node_call_cox-reg_2.R")
source("Data_node_call_cox-reg_3.R")
source("Coord_node_call_iter_cox-reg.R")
}
for(i in 1:3){
source("Data_node_call_cox-reg_1.R")
source("Data_node_call_cox-reg_2.R")
source("Data_node_call_cox-reg_3.R")
source("Coord_node_call_iter_cox-reg.R")
}
############### POOLED COX MODEL ####################
## License: https://creativecommons.org/licenses/by-nc-sa/4.0/
## Copyright: GRIIS / Université de Sherbrooke
# Includes
library("survival")
library("survminer")
nbBetas <- 3 # Input the number of betas
# If you want to skip the automated working directory setting, input 1 here.
# If you do so, make sure the working directory is set correctly manualy.
manualwd <- -1
if (manualwd != 1) {
# Set working directory automatically
# this.path package is available
if (require(this.path)) {
setwd(this.dir())
# else if running in R studio and the rstudioapi is available, set the correct working directory
} else if ((Sys.getenv("RSTUDIO") == "1") & (require("rstudioapi"))) {
print("RSTUDIO")
path <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(path)
# no known means to automatically set working directory
} else {
stop("The required conditions to automatically set the working directory are not met. See R file")
}
} else {
print("The automated working directory setup has been bypassed. If there is an error, this might be the cause.")
}
### Code starts here
data1 <- read.csv("Data_node_1.csv")
data2 <- read.csv("Data_node_2.csv")
data3 <- read.csv("Data_node_3.csv")
data <- rbind(data1, data2, data3)
column_indices <- (3:(nbBetas + 2))
formula <- as.formula(paste("Surv(time, status) ~", paste(paste0("data[,", column_indices, "]"), collapse = " + ")))
res.cox <- coxph(formula, data, ties = "breslow")
summary(res.cox)
## Remove all environment variables.
## If you want to see the variable that were created, simply don't execute that line (and clear them manually after)
rm(list = ls())
beta_sum <- matrix(0, nbBetas, 1)
nbBetas = 3
beta_sum <- matrix(0, nbBetas, 1)
beta_sum
k=1
############### DISTRIBUTED COX MODEL ####################
############### Local site code ###########################
## License: https://creativecommons.org/licenses/by-nc-sa/4.0/
## Copyright: GRIIS / Université de Sherbrooke
# Loading packages and setting up core variables --------------------------
library("survival")          # Contains the core survival analysis routines
# If you want to skip the automated working directory setting, input 1 here.
# If you do so, make sure the working directory is set correctly manualy.
manualwd <- -1
# If you want to override the node numbering based on filename, input 0 or a positive integer here
manualk <- 1
manualt <- -1
# No modifications should be required below this point
######################################################
if (manualwd != 1) {
# Set working directory automatically
# this.path package is available
if (require(this.path)) {
setwd(this.dir())
# else if running in R studio and the rstudioapi is available, set the correct working directory
} else if ((Sys.getenv("RSTUDIO") == "1") & (require("rstudioapi"))) {
print("RSTUDIO")
path <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(path)
# no known means to automatically set working directory
} else {
stop("The required conditions to automatically set the working directory are not met. See R file")
}
} else {
print("The automated working directory setup has been bypassed. If there is an error, this might be the cause.")
}
# Verifying if there is a coordination node output file present -- Otherwise initialize files
if (!file.exists(paste0("Times_", manualk ,"_output.csv"))) {
source("Data_node_call_init_cox-reg.R")
data_call_init_cox_reg(manualwd, manualk)
# If a coordination node output file exists -- Start a new iteration
} else {
source("Data_node_call_iter_cox-reg.R")
data_call_iter_cox_reg(manualwd, manualk, manualt)
}
## Remove all environment variables.
## If you want to see the variable that were created, simply don't execute that line (and clear them manually after)
rm(list = ls())
as.matrix(read.csv(paste0("Beta_local_", k, ".csv")))
k=1
as.matrix(read.csv(paste0("Beta_local_", k, ".csv")))
q <- nrow(local_beta)
local_beta = as.matrix(read.csv(paste0("Beta_local_", k, ".csv")))
q <- nrow(local_beta)
for(i in 1:3){
source("Data_node_call_cox-reg_1.R")
source("Data_node_call_cox-reg_2.R")
source("Data_node_call_cox-reg_3.R")
source("Coord_node_call_iter_cox-reg.R")
}
