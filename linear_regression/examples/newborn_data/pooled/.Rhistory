############### Centralised inference ####################
############### Pooling organisation code ################
## License: https://creativecommons.org/licenses/by-nc-sa/4.0/
## Copyright: GRIIS / Université de Sherbrooke
# Importing data ----------------------------------------------------------
# Extracts data from the CSV and creates R data frame
pooled_data <- read.csv("Pooled_data.csv")
## Code assumes a data frame where the first column is the outcome
## Creates a data frame with the outcome
outcome <- pooled_data[c(1)]
## Code assumes the columns 2 and following are predictors
## Creates a data frame with the predictors
predictors <- pooled_data[-c(1)]
## Create a frame with the intercept (here 1) for each observation
intercept <- rep(1,nrow(pooled_data))
## joins the intercepts and the predictors
intercept_pred <- data.frame(intercept,predictors)
# Summary statistics for the coefficient estimates in linear regression model----
xtx <- t(as.matrix(intercept_pred))%*%as.matrix(intercept_pred)
xtx_inverse <- solve(xtx)
yty <- t(as.matrix(outcome))%*%as.matrix(outcome)
xty <- t(as.matrix(intercept_pred))%*%as.matrix(outcome)
# Coefficient estimates in linear regression model-------------------------
# Coefficients and Variance matrix
beta <- xtx_inverse%*%xty
varbeta <- (1/(nrow(pooled_data)-ncol(intercept_pred)))*drop((yty-((t(beta))%*%xty))) * xtx_inverse
# Confidence interval with alpha=0.05
upper <- beta + qt(p=.05/2, df=nrow(pooled_data)-ncol(intercept_pred), lower.tail=FALSE)*sqrt(diag(varbeta))
lower <- beta - qt(p=.05/2, df=nrow(pooled_data)-ncol(intercept_pred), lower.tail=FALSE)*sqrt(diag(varbeta))
# Summary and outputs ----------------------------------------------------
output <- setNames(data.frame(beta,upper,lower, row.names = c("Intercept",paste0("Pred", c(1:ncol(predictors))))), c("Beta", "Upper", "Lower"))
## Producing the CSV file containing the final outputs
write.csv(output, file="PoolingOrg_results_centralised_lin_reg.csv")
## Remove all environment variables.
## If you want to see the variable that were create, simply don't execute that line (and clear them manually after)
rm(list = ls())
############### Distributed inference ####################
############### Data node code ###########################
## License: https://creativecommons.org/licenses/by-nc-sa/4.0/
## Copyright: GRIIS / Université de Sherbrooke
# Loading packages and setting up core variables --------------------------
# The package this.path is to automatically identify the script filename and deduce the node identifier.
# https://cran.r-project.org/package=this.path https://cran.r-project.org/web/packages/this.path/this.path.pdf
# It is NOT required to run the analysis. If the package is not available, the node identifier (variable k) will need to be set manually
# If the this.path package is not installed but you did set the node identifier manually below, you can safely ignore the R warning about the "this.path" package not being available.
# Insert the data node identifier here (integer >=0). If the this.path package is available, you can simply leave the default value (-1)
k <- 1
# Check if the package is installed
thispath_available <- require("this.path")
if (thispath_available) {
# When the this.path package is installed, automatically set data node identifier based on the filename.
# This assumes a file with name like Data-node_[[:digit:]]+_call_lin-reg.R
filename <- basename2(this.path())
fu<- min(unlist(gregexpr("_",filename)))
k <- strtoi(substring(filename,11,fu-1))
} else {
# if the r package this.path is not available/installed, the data node identifier set above will be used instead.
if (k < 0) {stop("The node identifier is not correct")}
}
source("Data-node_core_code_lin-reg.R")
