source("Data_node_call_log-reg_2.R")
source("Data_node_call_log-reg_3.R")
source("Coord_node_call_iter_log-reg.R")
}
source("Data_node_call_log-reg_1.R")
# If you want to skip the automated working directory setting, input 1 here.
# If you do so, make sure the working directory is set correctly manualy.
manualwd <- -1
# If you want to override the node numbering based on filename, input 0 or a positive integer here
manualk <- 1
manualt <- -1
if (manualwd != 1) {
# Set working directory automatically
# this.path package is available
if (require(this.path)) {
setwd(this.dir())
# else if running in R studio and the rstudioapi is available, set the correct working directory
} else if ((Sys.getenv("RSTUDIO") == "1") & (require("rstudioapi"))) {
print("RSTUDIO")
path <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(path)
# no known means to automatically set working directory
} else {
stop("The required conditions to automatically set the working directory are not met. See R file")
}
} else {
print("The automated working directory setup has been bypassed. If there is an error, this might be the cause.")
}
# Veryfiying if there is a coordination node output file present
nbprimerfiles <- length(list.files(pattern="Coord_node_iter_[[:digit:]]+_primer.csv"))
source("Data_node_call_iter_log-reg.R")
data_call_iter_log_reg(manualwd,manualk,manualt)
k <- -1
t <- -1
# If there is a manual override, the node number (k) is set to the manual value --------------------------
if (manualk >= 0) {
k <- manualk
# If there is no valid override number, there will be an attempt to extract the node number from the data file name
} else {
# List all the data files conforming the the pattern below. There should be only 1
datafileslist <- list.files(pattern="Data_node_[[:digit:]]+.csv")
# Assuming there is only one data file found
if (length(datafileslist) == 1) {
filename <- datafileslist[[1]]
lastunders <- max(unlist(gregexpr("_",filename)))
lenmainfilename <- nchar(filename)-4
autok <- strtoi(substring(filename,lastunders+1,lenmainfilename))
k <- autok
# If there is more than one data file in the folder, the script will halt.
} else {
stop("There is more than one data file in this folder, the node number cannot be automatically identified")
}
}
k <- -1
t <- -1
# List all the data files conforming the the pattern below. There should be only 1
datafileslist <- list.files(pattern="Data_node_[[:digit:]]+.csv")
# Assuming there is only one data file found
if (length(datafileslist) == 1) {
filename <- datafileslist[[1]]
lastunders <- max(unlist(gregexpr("_",filename)))
lenmainfilename <- nchar(filename)-4
autok <- strtoi(substring(filename,lastunders+1,lenmainfilename))
k <- autok
# If there is more than one data file in the folder, the script will halt.
} else {
stop("There is more than one data file in this folder, the node number cannot be automatically identified")
}
k=1
# If you want to skip the automated working directory setting, input 1 here.
# If you do so, make sure the working directory is set correctly manualy.
manualwd <- -1
# If you want to override the node numbering based on filename, input 0 or a positive integer here
manualk <- 1
manualt <- -1
if (manualwd != 1) {
# Set working directory automatically
# this.path package is available
if (require(this.path)) {
setwd(this.dir())
# else if running in R studio and the rstudioapi is available, set the correct working directory
} else if ((Sys.getenv("RSTUDIO") == "1") & (require("rstudioapi"))) {
print("RSTUDIO")
path <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(path)
# no known means to automatically set working directory
} else {
stop("The required conditions to automatically set the working directory are not met. See R file")
}
} else {
print("The automated working directory setup has been bypassed. If there is an error, this might be the cause.")
}
# Veryfiying if there is a coordination node output file present
nbprimerfiles <- length(list.files(pattern="Coord_node_iter_[[:digit:]]+_primer.csv"))
if (manualwd != 1) {
# Set working directory automatically
# this.path package is available
if (require(this.path)) {
setwd(this.dir())
# else if running in R studio and the rstudioapi is available, set the correct working directory
} else if ((Sys.getenv("RSTUDIO") == "1") & (require("rstudioapi"))) {
print("RSTUDIO")
path <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(path)
# no known means to automatically set working directory
} else {
stop("The required conditions to automatically set the working directory are not met. See R file")
}
} else {
print("The automated working directory setup has been bypassed. If there is an error, this might be the cause.")
}
k <- -1
t <- -1
# If there is a manual override, the node number (k) is set to the manual value --------------------------
if (manualk >= 0) {
k <- manualk
# If there is no valid override number, there will be an attempt to extract the node number from the data file name
} else {
# List all the data files conforming the the pattern below. There should be only 1
datafileslist <- list.files(pattern="Data_node_[[:digit:]]+.csv")
# Assuming there is only one data file found
if (length(datafileslist) == 1) {
filename <- datafileslist[[1]]
lastunders <- max(unlist(gregexpr("_",filename)))
lenmainfilename <- nchar(filename)-4
autok <- strtoi(substring(filename,lastunders+1,lenmainfilename))
k <- autok
# If there is more than one data file in the folder, the script will halt.
} else {
stop("There is more than one data file in this folder, the node number cannot be automatically identified")
}
}
# List all the data files conforming the the pattern below. There should be at least 1
coordouputfileslist <- list.files(pattern="Coord_node_iter_[[:digit:]]+_primer.csv")
length(coordouputfileslist) > 0
length(coordouputfileslist)
iterlst=list()
coordouputfileslist
for (fl in coordouputfileslist){
outputfname <- fl
lastundersf <- max(unlist(gregexpr("_",outputfname)))
suffname <- nchar(outputfname)-11
iterfl <- strtoi(substring(outputfname,lastundersf-1,suffname))
iterlst <- append(iterlst,iterfl)
}
sortediterlst <- iterlst[order(names(setNames(iterlst, iterlst)),decreasing=TRUE)]
sortediterlst
coordouputfileslist
fl = coordouputfileslist[1]
outputfname <- fl
outputfname
lastundersf <- max(unlist(gregexpr("_",outputfname)))
lastundersf
suffname <- nchar(outputfname)-11
suffname
outputfname
iterfl <- strtoi(substring(outputfname,lastundersf-1,suffname))
iterfl
iterlst
iterlst=list()
coordouputfileslist
fl = coordouputfileslist[2]
fl
outputfname <- fl
lastundersf <- max(unlist(gregexpr("_",outputfname)))
suffname <- nchar(outputfname)-11
iterfl <- strtoi(substring(outputfname,lastundersf-1,suffname))
iterlst <- append(iterlst,iterfl)
iterlst
iterfl
suffname
lastundersf
outputfname
lastundersf
suffname <- nchar(outputfname)-11
suffname
lastundersf
outputfname <- fl
lastundersf <- max(unlist(gregexpr("_",outputfname)))
suffname <- nchar(outputfname)-11
iterfl <- strtoi(substring(outputfname,lastundersf-1,suffname)) # Je pense que le problème de # de caractere vient d'ici! Ce serait le -1
outputfname
lastundersf
suffname
lastundersf
unlist(gregexpr("_",outputfname))
outputfname
outputfname <- fl
underspositions <- unlist(gregexpr("_",outputfname))
lastundersf <- max(underspositions)
beforelastundersf <- underspositions[length(underspositions)-1]
lastundersf
beforelastundersf
lastundersf
iterfl <- strtoi(substring(outputfname,beforelastundersf+1,lastundersf)) # Je pense que le problème de # de caractere vient d'ici! Ce serait le -1
iterfl
outputfname
test = "123456789"
substr(test, 3, 5)
iterfl <- strtoi(substring(outputfname,beforelastundersf+1,lastundersf-1)) # Je pense que le problème de # de caractere vient d'ici! Ce serait le -1
iterfl
for(i in 1:20){
source("Data_node_call_log-reg_1.R")
source("Data_node_call_log-reg_2.R")
source("Data_node_call_log-reg_3.R")
source("Coord_node_call_iter_log-reg.R")
}
# If you want to skip the automated working directory setting, input 1 here.
# If you do so, make sure the working directory is set correctly manualy.
manualwd <- -1
# If you want to override the node numbering based on filename, input 0 or a positive integer here
manualk <- 1
manualt <- -1
if (manualwd != 1) {
# Set working directory automatically
# this.path package is available
if (require(this.path)) {
setwd(this.dir())
# else if running in R studio and the rstudioapi is available, set the correct working directory
} else if ((Sys.getenv("RSTUDIO") == "1") & (require("rstudioapi"))) {
print("RSTUDIO")
path <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(path)
# no known means to automatically set working directory
} else {
stop("The required conditions to automatically set the working directory are not met. See R file")
}
} else {
print("The automated working directory setup has been bypassed. If there is an error, this might be the cause.")
}
# Veryfiying if there is a coordination node output file present
nbprimerfiles <- length(list.files(pattern="Coord_node_iter_[[:digit:]]+_primer.csv"))
# If there is a manual override, the node number (k) is set to the manual value --------------------------
if (manualk >= 0) {
k <- manualk
# If there is no valid override number, there will be an attempt to extract the node number from the data file name
} else {
# List all the data files conforming the the pattern below. There should be only 1
datafileslist <- list.files(pattern="Data_node_[[:digit:]]+.csv")
# Assuming there is only one data file found
if (length(datafileslist) == 1) {
filename <- datafileslist[[1]]
lastunders <- max(unlist(gregexpr("_",filename)))
lenmainfilename <- nchar(filename)-4
autok <- strtoi(substring(filename,lastunders+1,lenmainfilename))
k <- autok
# If there is more than one data file in the folder, the script will halt.
} else {
stop("There is more than one data file in this folder, the node number cannot be automatically identified")
}
}
# If there is a manual override, the iteration sequence number (t) is set to the manual value ------------
if (manualt >= 0) {
t <- manualt
# If there is no valid override sequence number, there will be an attempt to extract the number from the data file name
} else {
# List all the data files conforming the the pattern below. There should be at least 1
coordouputfileslist <- list.files(pattern="Coord_node_iter_[[:digit:]]+_primer.csv")
# Assuming there is at least one file found
if (length(coordouputfileslist) > 0) {
iterlst=list()
for (fl in coordouputfileslist){
outputfname <- fl
underspositions <- unlist(gregexpr("_",outputfname))
lastundersf <- max(underspositions)
beforelastundersf <- underspositions[length(underspositions)-1]
suffname <- nchar(outputfname)-11
iterfl <- strtoi(substring(outputfname,beforelastundersf+1,lastundersf-1)) # Je pense que le problème de # de caractere vient d'ici! Ce serait le -1
iterlst <- append(iterlst,iterfl)
}
sortediterlst <- iterlst[order(names(setNames(iterlst, iterlst)),decreasing=TRUE)]
t <- sortediterlst[[1]]
} else {
stop("There is no primer file found")
}
}
sortediterlst
iterlst=vector()
iterlst=vector(mode="numeric")
iterlst <- append(iterlst,iterfl)
iterlst <- append(iterlst,iterfl)
for(i in 1:20){
source("Data_node_call_log-reg_1.R")
source("Data_node_call_log-reg_2.R")
source("Data_node_call_log-reg_3.R")
source("Coord_node_call_iter_log-reg.R")
}
# If you want to skip the automated working directory setting, input 1 here.
# If you do so, make sure the working directory is set correctly manualy.
manualwd <- -1
# If you want to override the node numbering based on filename, input 0 or a positive integer here
manualk <- 1
manualt <- -1
# If there is a manual override, the node number (k) is set to the manual value --------------------------
if (manualk >= 0) {
k <- manualk
# If there is no valid override number, there will be an attempt to extract the node number from the data file name
} else {
# List all the data files conforming the the pattern below. There should be only 1
datafileslist <- list.files(pattern="Data_node_[[:digit:]]+.csv")
# Assuming there is only one data file found
if (length(datafileslist) == 1) {
filename <- datafileslist[[1]]
lastunders <- max(unlist(gregexpr("_",filename)))
lenmainfilename <- nchar(filename)-4
autok <- strtoi(substring(filename,lastunders+1,lenmainfilename))
k <- autok
# If there is more than one data file in the folder, the script will halt.
} else {
stop("There is more than one data file in this folder, the node number cannot be automatically identified")
}
}
# If there is a manual override, the iteration sequence number (t) is set to the manual value ------------
if (manualt >= 0) {
t <- manualt
# If there is no valid override sequence number, there will be an attempt to extract the number from the data file name
} else {
# List all the data files conforming the the pattern below. There should be at least 1
coordouputfileslist <- list.files(pattern="Coord_node_iter_[[:digit:]]+_primer.csv")
# Assuming there is at least one file found
if (length(coordouputfileslist) > 0) {
itervec=vector(mode="numeric")
for (fl in coordouputfileslist){
outputfname <- fl
underspositions <- unlist(gregexpr("_",outputfname))
lastundersf <- max(underspositions)
beforelastundersf <- underspositions[length(underspositions)-1]
iterfl <- strtoi(substring(outputfname,beforelastundersf+1,lastundersf-1))
itervec <- append(itervec,iterfl)
}
t <- max(itervec)
} else {
stop("There is no primer file found")
}
}
source("Data_node_core_iter_log-reg.R")
data_iter_log_reg(manualwd,k,t)
sigmoid <- function(x) {
exp(x) / (1 + exp(x))
}
logreg_D <- function(beta, X, y) {
n <- nrow(X)
t(X) %*% (y - sigmoid(X %*% beta)) # / n
}
logreg_V <- function(beta, X) {
n <- nrow(X)
sig <- sigmoid(X %*% beta)[,1]
t(X*(sig*(1-sig)))%*%X # / n
}
if (manualwd != 1) {
# Set working directory automatically
# this.path package is available
if (require(this.path)) {
setwd(this.dir())
# else if running in R studio and the rstudioapi is available, set the correct working directory
} else if ((Sys.getenv("RSTUDIO") == "1") & (require("rstudioapi"))) {
print("RSTUDIO")
path <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(path)
# no known means to automatically allocate node number
} else {
stop("The required conditions to automatically set the working directory are not met. See R file")
}
} else {
print("The automated working directory setup has been bypassed. If there is an error, this might be the cause.")
}
node_data <- read.csv(paste0("Data_node_", k, ".csv"))
beta_t <- read.csv(paste0("Coord_node_iter_", t, "_primer.csv"))[,1]
paste0("Coord_node_iter_", t, "_primer.csv")
# If you want to skip the automated working directory setting, input 1 here.
# If you do so, make sure the working directory is set correctly manualy.
manualwd <- -1
# If you want to override the iteration numbering based on filename, input 0 or a positive integer here
manualt <- -1
if (manualwd != 1) {
# Set working directory automatically
# this.path package is available
if (require(this.path)) {
setwd(this.dir())
# else if running in R studio and the rstudioapi is available, set the correct working directory
} else if ((Sys.getenv("RSTUDIO") == "1") & (require("rstudioapi"))) {
print("RSTUDIO")
path <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(path)
# no known means to automatically set working directory
} else {
stop("The required conditions to automatically set the working directory are not met. See R file")
}
} else {
print("The automated working directory setup has been bypassed. If there is an error, this might be the cause.")
}
for(i in 1:20){
source("Data_node_call_log-reg_1.R")
source("Data_node_call_log-reg_2.R")
source("Data_node_call_log-reg_3.R")
if(i!=20){
source("Coord_node_call_iter_log-reg.R")
}
}
for(i in 1:20){
source("Data_node_call_log-reg_1.R")
source("Data_node_call_log-reg_2.R")
source("Data_node_call_log-reg_3.R")
if(i!=20){
source("Coord_node_call_iter_log-reg.R")
}
}
i in 1:20
for(i in 1:20){
source("Data_node_call_log-reg_1.R")
source("Data_node_call_log-reg_2.R")
source("Data_node_call_log-reg_3.R")
if(i!=20){
source("Coord_node_call_iter_log-reg.R")
}
}
for(i in 1:20){
source("Data_node_call_log-reg_1.R")
source("Data_node_call_log-reg_2.R")
source("Data_node_call_log-reg_3.R")
if(i==20){
source("Coord_node_call_iter_log-reg.R")
}
}
for(i in 1:20){
source("Data_node_call_log-reg_1.R")
source("Data_node_call_log-reg_2.R")
source("Data_node_call_log-reg_3.R")
#if(i==20){
#  source("Coord_node_call_iter_log-reg.R")
#}
}
for(i in 1:20){
source("Data_node_call_log-reg_1.R")
source("Data_node_call_log-reg_2.R")
source("Data_node_call_log-reg_3.R")
print(i)
if(i==20){
source("Coord_node_call_iter_log-reg.R")
}
}
i=0
for(i in 1:20){
source("Data_node_call_log-reg_1.R")
source("Data_node_call_log-reg_2.R")
source("Data_node_call_log-reg_3.R")
print(i)
if(i==20){
source("Coord_node_call_iter_log-reg.R")
}
}
i=0
for(i in 1:20){
source("Data_node_call_log-reg_1.R")
source("Data_node_call_log-reg_2.R")
source("Data_node_call_log-reg_3.R")
i
#if(i==20){
#  source("Coord_node_call_iter_log-reg.R")
#}
}
for(i in 1:20){
j<- i
source("Data_node_call_log-reg_1.R")
source("Data_node_call_log-reg_2.R")
source("Data_node_call_log-reg_3.R")
#if(i==20){
#  source("Coord_node_call_iter_log-reg.R")
#}
}
j<- i
for(i in 1:20){
j<- i
source("Data_node_call_log-reg_1.R")
source("Data_node_call_log-reg_2.R")
source("Data_node_call_log-reg_3.R")
j
#if(i==20){
#  source("Coord_node_call_iter_log-reg.R")
#}
}
for(i in 1:20){
j<- i
source("Data_node_call_log-reg_1.R")
source("Data_node_call_log-reg_2.R")
source("Data_node_call_log-reg_3.R")
j
#if(i==20){
#  source("Coord_node_call_iter_log-reg.R")
#}
}
for(i in 1:20){
j<- i
source("Data_node_call_log-reg_1.R")
source("Data_node_call_log-reg_2.R")
source("Data_node_call_log-reg_3.R")
j
#if(i==20){
#  source("Coord_node_call_iter_log-reg.R")
#}
}
i=0
for(i in 1:20){
j<- i
source("Data_node_call_log-reg_1.R")
source("Data_node_call_log-reg_2.R")
source("Data_node_call_log-reg_3.R")
j
#if(i==20){
#  source("Coord_node_call_iter_log-reg.R")
#}
}
